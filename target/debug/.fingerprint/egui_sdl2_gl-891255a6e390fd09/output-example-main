{"$message_type":"diagnostic","message":"unused imports: `Vec2`, `Vec3`, `vec3`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":347,"byte_end":351,"line_start":15,"line_end":15,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"use glm::{vec2, vec3, Vec2, Vec3};","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":353,"byte_end":357,"line_start":15,"line_end":15,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"use glm::{vec2, vec3, Vec2, Vec3};","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":359,"byte_end":363,"line_start":15,"line_end":15,"column_start":29,"column_end":33,"is_primary":true,"text":[{"text":"use glm::{vec2, vec3, Vec2, Vec3};","highlight_start":29,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":345,"byte_end":363,"line_start":15,"line_end":15,"column_start":15,"column_end":33,"is_primary":true,"text":[{"text":"use glm::{vec2, vec3, Vec2, Vec3};","highlight_start":15,"highlight_end":33}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Vec2`, `Vec3`, `vec3`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:15:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse glm::{vec2, vec3, Vec2, Vec3};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `HashMap`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":34,"byte_end":41,"line_start":2,"line_end":2,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"    use ahash::{HashMap, HashMapExt};","highlight_start":17,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":34,"byte_end":43,"line_start":2,"line_end":2,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"    use ahash::{HashMap, HashMapExt};","highlight_start":17,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `HashMap`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:2:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use ahash::{HashMap, HashMapExt};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `objects`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":122,"byte_end":129,"line_start":5,"line_end":5,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"    use crate::{objects, Circle};","highlight_start":17,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":122,"byte_end":131,"line_start":5,"line_end":5,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"    use crate::{objects, Circle};","highlight_start":17,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `objects`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:5:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::{objects, Circle};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":748,"byte_end":749,"line_start":30,"line_end":30,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    *,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":742,"byte_end":749,"line_start":29,"line_end":30,"column_start":57,"column_end":6,"is_primary":true,"text":[{"text":"    window_manager::windows::{MainWindow, SandboxWindow},","highlight_start":57,"highlight_end":58},{"text":"    *,","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `*`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:30:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    *,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `HashMapExt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":43,"byte_end":53,"line_start":2,"line_end":2,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"    use ahash::{HashMap, HashMapExt};","highlight_start":26,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `HashMapExt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:2:26\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use ahash::{HashMap, HashMapExt};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `window_width`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":6119,"byte_end":6131,"line_start":154,"line_end":154,"column_start":47,"column_end":59,"is_primary":true,"text":[{"text":"    pub fn update_objects(&mut self, dt: f32, window_width: f32, window_height: f32) {","highlight_start":47,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":6119,"byte_end":6131,"line_start":154,"line_end":154,"column_start":47,"column_end":59,"is_primary":true,"text":[{"text":"    pub fn update_objects(&mut self, dt: f32, window_width: f32, window_height: f32) {","highlight_start":47,"highlight_end":59}],"label":null,"suggested_replacement":"_window_width","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `window_width`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:154:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn update_objects(&mut self, dt: f32, window_width: f32, window_height: f32) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_window_width`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `window_height`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":6138,"byte_end":6151,"line_start":154,"line_end":154,"column_start":66,"column_end":79,"is_primary":true,"text":[{"text":"    pub fn update_objects(&mut self, dt: f32, window_width: f32, window_height: f32) {","highlight_start":66,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":6138,"byte_end":6151,"line_start":154,"line_end":154,"column_start":66,"column_end":79,"is_primary":true,"text":[{"text":"    pub fn update_objects(&mut self, dt: f32, window_width: f32, window_height: f32) {","highlight_start":66,"highlight_end":79}],"label":null,"suggested_replacement":"_window_height","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `window_height`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:154:66\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn update_objects(&mut self, dt: f32, window_width: f32, window_height: f32) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_window_height`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `delta_time`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/camera.rs","byte_start":350,"byte_end":360,"line_start":15,"line_end":15,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"    pub fn update(&mut self, delta_time: f32) {","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"examples/camera.rs","byte_start":350,"byte_end":360,"line_start":15,"line_end":15,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"    pub fn update(&mut self, delta_time: f32) {","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":"_delta_time","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `delta_time`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/camera.rs:15:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn update(&mut self, delta_time: f32) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_delta_time`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `repaint_after`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":8220,"byte_end":8233,"line_start":238,"line_end":238,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"        let repaint_after = viewport_output","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":8220,"byte_end":8233,"line_start":238,"line_end":238,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"        let repaint_after = viewport_output","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":"_repaint_after","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `repaint_after`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:238:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let repaint_after = viewport_output\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_repaint_after`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary `unsafe` block","code":{"code":"unused_unsafe","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":8905,"byte_end":8911,"line_start":255,"line_end":255,"column_start":31,"column_end":37,"is_primary":true,"text":[{"text":"                    texture = unsafe { create_texture(SCREEN_WIDTH, SCREEN_HEIGHT) };","highlight_start":31,"highlight_end":37}],"label":"unnecessary `unsafe` block","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_unsafe)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `unsafe` block\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:255:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    texture = unsafe { create_texture(SCREEN_WIDTH, SCREEN_HEIGHT) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munnecessary `unsafe` block\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_unsafe)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"methods `ui` and `get_sandbox_window` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":8563,"byte_end":8586,"line_start":216,"line_end":216,"column_start":5,"column_end":28,"is_primary":false,"text":[{"text":"    impl<'a> MainWindow<'a> {","highlight_start":5,"highlight_end":28}],"label":"methods in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/window_manager/window_manager.rs","byte_start":8792,"byte_end":8794,"line_start":224,"line_end":224,"column_start":16,"column_end":18,"is_primary":true,"text":[{"text":"        pub fn ui(&mut self, ctx: &egui::Context) {","highlight_start":16,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/window_manager/window_manager.rs","byte_start":10780,"byte_end":10798,"line_start":276,"line_end":276,"column_start":16,"column_end":34,"is_primary":true,"text":[{"text":"        pub fn get_sandbox_window(&self) -> &SandboxWindow {","highlight_start":16,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `ui` and `get_sandbox_window` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:224:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl<'a> MainWindow<'a> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn ui(&mut self, ctx: &egui::Context) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn get_sandbox_window(&self) -> &SandboxWindow {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"associated items `new` and `area` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/objects.rs","byte_start":627,"byte_end":638,"line_start":21,"line_end":21,"column_start":1,"column_end":12,"is_primary":false,"text":[{"text":"impl Circle {","highlight_start":1,"highlight_end":12}],"label":"associated items in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/objects.rs","byte_start":652,"byte_end":655,"line_start":22,"line_end":22,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new(cell_type: i32, position: Vec2, radius: f32, color: Vec3, speed_limit: f32) -> Self {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/objects.rs","byte_start":1149,"byte_end":1153,"line_start":39,"line_end":39,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    pub fn area(&self) -> f32 {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated items `new` and `area` are never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/objects.rs:22:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Circle {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12massociated items in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(cell_type: i32, position: Vec2, radius: f32, color: Vec3, speed_limit: f32) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn area(&self) -> f32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"methods `get_offset` and `get_zoom` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/camera.rs","byte_start":170,"byte_end":181,"line_start":11,"line_end":11,"column_start":1,"column_end":12,"is_primary":false,"text":[{"text":"impl Camera {","highlight_start":1,"highlight_end":12}],"label":"methods in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/camera.rs","byte_start":648,"byte_end":658,"line_start":23,"line_end":23,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"    pub fn get_offset(&self) -> Vec2 {","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/camera.rs","byte_start":714,"byte_end":722,"line_start":27,"line_end":27,"column_start":12,"column_end":20,"is_primary":true,"text":[{"text":"    pub fn get_zoom(&self) -> f32 {","highlight_start":12,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `get_offset` and `get_zoom` are never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/camera.rs:23:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Camera {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn get_offset(&self) -> Vec2 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn get_zoom(&self) -> f32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `SCREEN_WIDTH` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":917,"byte_end":929,"line_start":41,"line_end":41,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"    let mut SCREEN_WIDTH = 1280;","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":917,"byte_end":929,"line_start":41,"line_end":41,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"    let mut SCREEN_WIDTH = 1280;","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":"screen_width","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SCREEN_WIDTH` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:41:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut SCREEN_WIDTH = 1280;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `screen_width`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `SCREEN_HEIGHT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":950,"byte_end":963,"line_start":42,"line_end":42,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"    let mut SCREEN_HEIGHT = 700;","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":950,"byte_end":963,"line_start":42,"line_end":42,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"    let mut SCREEN_HEIGHT = 700;","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":"screen_height","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SCREEN_HEIGHT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:42:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut SCREEN_HEIGHT = 700;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `screen_height`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":4102,"byte_end":4108,"line_start":121,"line_end":121,"column_start":45,"column_end":51,"is_primary":true,"text":[{"text":"            CString::new(\"in_pos\").unwrap().as_ptr(),","highlight_start":45,"highlight_end":51}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":4070,"byte_end":4101,"line_start":121,"line_end":121,"column_start":13,"column_end":44,"is_primary":false,"text":[{"text":"            CString::new(\"in_pos\").unwrap().as_ptr(),","highlight_start":13,"highlight_end":44}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(temporary_cstring_as_ptr)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:121:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            CString::new(\"in_pos\").unwrap().as_ptr(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(temporary_cstring_as_ptr)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":5880,"byte_end":5886,"line_start":174,"line_end":174,"column_start":49,"column_end":55,"is_primary":true,"text":[{"text":"                CString::new(\"offset\").unwrap().as_ptr(),","highlight_start":49,"highlight_end":55}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":5848,"byte_end":5879,"line_start":174,"line_end":174,"column_start":17,"column_end":48,"is_primary":false,"text":[{"text":"                CString::new(\"offset\").unwrap().as_ptr(),","highlight_start":17,"highlight_end":48}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:174:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                CString::new(\"offset\").unwrap().as_ptr(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":6042,"byte_end":6048,"line_start":178,"line_end":178,"column_start":47,"column_end":53,"is_primary":true,"text":[{"text":"                CString::new(\"zoom\").unwrap().as_ptr(),","highlight_start":47,"highlight_end":53}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":6012,"byte_end":6041,"line_start":178,"line_end":178,"column_start":17,"column_end":46,"is_primary":false,"text":[{"text":"                CString::new(\"zoom\").unwrap().as_ptr(),","highlight_start":17,"highlight_end":46}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:178:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                CString::new(\"zoom\").unwrap().as_ptr(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":6494,"byte_end":6500,"line_start":191,"line_end":191,"column_start":58,"column_end":64,"is_primary":true,"text":[{"text":"                CString::new(\"circle_position\").unwrap().as_ptr(),","highlight_start":58,"highlight_end":64}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":6453,"byte_end":6493,"line_start":191,"line_end":191,"column_start":17,"column_end":57,"is_primary":false,"text":[{"text":"                CString::new(\"circle_position\").unwrap().as_ptr(),","highlight_start":17,"highlight_end":57}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:191:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                CString::new(\"circle_position\").unwrap().as_ptr(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":6674,"byte_end":6680,"line_start":195,"line_end":195,"column_start":56,"column_end":62,"is_primary":true,"text":[{"text":"                CString::new(\"circle_radius\").unwrap().as_ptr(),","highlight_start":56,"highlight_end":62}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":6635,"byte_end":6673,"line_start":195,"line_end":195,"column_start":17,"column_end":55,"is_primary":false,"text":[{"text":"                CString::new(\"circle_radius\").unwrap().as_ptr(),","highlight_start":17,"highlight_end":55}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:195:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                CString::new(\"circle_radius\").unwrap().as_ptr(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":6852,"byte_end":6858,"line_start":199,"line_end":199,"column_start":55,"column_end":61,"is_primary":true,"text":[{"text":"                CString::new(\"circle_color\").unwrap().as_ptr(),","highlight_start":55,"highlight_end":61}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":6814,"byte_end":6851,"line_start":199,"line_end":199,"column_start":17,"column_end":54,"is_primary":false,"text":[{"text":"                CString::new(\"circle_color\").unwrap().as_ptr(),","highlight_start":17,"highlight_end":54}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:199:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                CString::new(\"circle_color\").unwrap().as_ptr(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused implementer of `Future` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":6321,"byte_end":6338,"line_start":159,"line_end":159,"column_start":13,"column_end":30,"is_primary":true,"text":[{"text":"            object.update(dt);","highlight_start":13,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"futures do nothing unless you `.await` or poll them","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_must_use)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused implementer of `Future` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:159:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            object.update(dt);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: futures do nothing unless you `.await` or poll them\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_must_use)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"22 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 22 warnings emitted\u001b[0m\n\n"}
