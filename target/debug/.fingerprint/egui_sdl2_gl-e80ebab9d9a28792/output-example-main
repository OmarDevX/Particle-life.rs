{"$message_type":"diagnostic","message":"unused imports: `Vec2`, `Vec3`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":347,"byte_end":351,"line_start":15,"line_end":15,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"use glm::{vec3, Vec3, vec2, Vec2};","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":359,"byte_end":363,"line_start":15,"line_end":15,"column_start":29,"column_end":33,"is_primary":true,"text":[{"text":"use glm::{vec3, Vec3, vec2, Vec2};","highlight_start":29,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":345,"byte_end":351,"line_start":15,"line_end":15,"column_start":15,"column_end":21,"is_primary":true,"text":[{"text":"use glm::{vec3, Vec3, vec2, Vec2};","highlight_start":15,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"examples/main.rs","byte_start":357,"byte_end":363,"line_start":15,"line_end":15,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"use glm::{vec3, Vec3, vec2, Vec2};","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Vec2`, `Vec3`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:15:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse glm::{vec3, Vec3, vec2, Vec2};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `keyboard::Keycode`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":397,"byte_end":414,"line_start":16,"line_end":16,"column_start":32,"column_end":49,"is_primary":true,"text":[{"text":"use sdl2::{event::WindowEvent, keyboard::Keycode};","highlight_start":32,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":395,"byte_end":414,"line_start":16,"line_end":16,"column_start":30,"column_end":49,"is_primary":true,"text":[{"text":"use sdl2::{event::WindowEvent, keyboard::Keycode};","highlight_start":30,"highlight_end":49}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `keyboard::Keycode`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:16:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse sdl2::{event::WindowEvent, keyboard::Keycode};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Slider`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":43,"byte_end":49,"line_start":2,"line_end":2,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"    use egui::{Modifiers, Slider, Ui};","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":41,"byte_end":49,"line_start":2,"line_end":2,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"    use egui::{Modifiers, Slider, Ui};","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Slider`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:2:27\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use egui::{Modifiers, Slider, Ui};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `TWITTER`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":1435,"byte_end":1442,"line_start":55,"line_end":55,"column_start":56,"column_end":63,"is_primary":true,"text":[{"text":"                    use egui::special_emojis::{GITHUB, TWITTER};","highlight_start":56,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":1433,"byte_end":1442,"line_start":55,"line_end":55,"column_start":54,"column_end":63,"is_primary":true,"text":[{"text":"                    use egui::special_emojis::{GITHUB, TWITTER};","highlight_start":54,"highlight_end":63}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `TWITTER`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:55:56\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    use egui::special_emojis::{GITHUB, TWITTER};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":700,"byte_end":701,"line_start":25,"line_end":25,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"use window_manager::{window_manager::windows::{MainWindow, SandboxWindow}, *};","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":698,"byte_end":701,"line_start":25,"line_end":25,"column_start":74,"column_end":77,"is_primary":true,"text":[{"text":"use window_manager::{window_manager::windows::{MainWindow, SandboxWindow}, *};","highlight_start":74,"highlight_end":77}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `*`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:25:76\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse window_manager::{window_manager::windows::{MainWindow, SandboxWindow}, *};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `ui`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":496,"byte_end":498,"line_start":24,"line_end":24,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"        pub fn scene_settings(&mut self, ui: &mut Ui) {","highlight_start":42,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":496,"byte_end":498,"line_start":24,"line_end":24,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"        pub fn scene_settings(&mut self, ui: &mut Ui) {","highlight_start":42,"highlight_end":44}],"label":null,"suggested_replacement":"_ui","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `ui`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:24:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn scene_settings(&mut self, ui: &mut Ui) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_ui`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `repaint_after`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":6618,"byte_end":6631,"line_start":171,"line_end":171,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"        let repaint_after = viewport_output","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":6618,"byte_end":6631,"line_start":171,"line_end":171,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"        let repaint_after = viewport_output","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":"_repaint_after","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `repaint_after`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:171:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let repaint_after = viewport_output\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_repaint_after`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary `unsafe` block","code":{"code":"unused_unsafe","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":7303,"byte_end":7309,"line_start":188,"line_end":188,"column_start":31,"column_end":37,"is_primary":true,"text":[{"text":"                    texture = unsafe { create_texture(SCREEN_WIDTH, SCREEN_HEIGHT) };","highlight_start":31,"highlight_end":37}],"label":"unnecessary `unsafe` block","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_unsafe)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `unsafe` block\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:188:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    texture = unsafe { create_texture(SCREEN_WIDTH, SCREEN_HEIGHT) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munnecessary `unsafe` block\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_unsafe)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `Objects` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":118,"byte_end":131,"line_start":8,"line_end":8,"column_start":16,"column_end":29,"is_primary":false,"text":[{"text":"    pub struct SandboxWindow {","highlight_start":16,"highlight_end":29}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/window_manager/window_manager.rs","byte_start":146,"byte_end":153,"line_start":9,"line_end":9,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        pub Objects: Vec<Circle>,","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`SandboxWindow` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `Objects` is never read\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:9:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct SandboxWindow {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub Objects: Vec<Circle>,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `SandboxWindow` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"methods `ui` and `get_sandbox_window` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":674,"byte_end":697,"line_start":34,"line_end":34,"column_start":5,"column_end":28,"is_primary":false,"text":[{"text":"    impl<'a> MainWindow<'a> {","highlight_start":5,"highlight_end":28}],"label":"methods in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/window_manager/window_manager.rs","byte_start":907,"byte_end":909,"line_start":42,"line_end":42,"column_start":16,"column_end":18,"is_primary":true,"text":[{"text":"        pub fn ui(&mut self, ctx: &egui::Context) {","highlight_start":16,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/window_manager/window_manager.rs","byte_start":2936,"byte_end":2954,"line_start":93,"line_end":93,"column_start":16,"column_end":34,"is_primary":true,"text":[{"text":"        pub fn get_sandbox_window(&self) -> &SandboxWindow {","highlight_start":16,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods `ui` and `get_sandbox_window` are never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:42:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl<'a> MainWindow<'a> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethods in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn ui(&mut self, ctx: &egui::Context) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn get_sandbox_window(&self) -> &SandboxWindow {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `area` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"examples/objects.rs","byte_start":479,"byte_end":490,"line_start":15,"line_end":15,"column_start":1,"column_end":12,"is_primary":false,"text":[{"text":"impl Circle {","highlight_start":1,"highlight_end":12}],"label":"method in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/objects.rs","byte_start":914,"byte_end":918,"line_start":29,"line_end":29,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    pub fn area(&self) -> f32 {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `area` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/objects.rs:29:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Circle {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn area(&self) -> f32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `SCREEN_WIDTH` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":980,"byte_end":992,"line_start":38,"line_end":38,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"    let mut SCREEN_WIDTH = 1280;","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":980,"byte_end":992,"line_start":38,"line_end":38,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"    let mut SCREEN_WIDTH = 1280;","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":"screen_width","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SCREEN_WIDTH` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:38:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut SCREEN_WIDTH = 1280;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `screen_width`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `SCREEN_HEIGHT` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":1013,"byte_end":1026,"line_start":39,"line_end":39,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"    let mut SCREEN_HEIGHT = 700;","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"examples/main.rs","byte_start":1013,"byte_end":1026,"line_start":39,"line_end":39,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"    let mut SCREEN_HEIGHT = 700;","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":"screen_height","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SCREEN_HEIGHT` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:39:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut SCREEN_HEIGHT = 700;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `screen_height`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":4068,"byte_end":4074,"line_start":111,"line_end":111,"column_start":101,"column_end":107,"is_primary":true,"text":[{"text":"        let pos_attrib = gl::GetAttribLocation(quad_shader_program, CString::new(\"in_pos\").unwrap().as_ptr());","highlight_start":101,"highlight_end":107}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":4036,"byte_end":4067,"line_start":111,"line_end":111,"column_start":69,"column_end":100,"is_primary":false,"text":[{"text":"        let pos_attrib = gl::GetAttribLocation(quad_shader_program, CString::new(\"in_pos\").unwrap().as_ptr());","highlight_start":69,"highlight_end":100}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(temporary_cstring_as_ptr)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:111:101\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let pos_attrib = gl::GetAttribLocation(quad_shader_program, CString::new(\"in_pos\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(temporary_cstring_as_ptr)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":5566,"byte_end":5572,"line_start":146,"line_end":146,"column_start":127,"column_end":133,"is_primary":true,"text":[{"text":"            let circle_position_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"circle_position\").unwrap().as_ptr());","highlight_start":127,"highlight_end":133}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":5525,"byte_end":5565,"line_start":146,"line_end":146,"column_start":86,"column_end":126,"is_primary":false,"text":[{"text":"            let circle_position_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"circle_position\").unwrap().as_ptr());","highlight_start":86,"highlight_end":126}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:146:127\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let circle_position_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"circle_position\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":5699,"byte_end":5705,"line_start":147,"line_end":147,"column_start":123,"column_end":129,"is_primary":true,"text":[{"text":"            let circle_radius_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"circle_radius\").unwrap().as_ptr());","highlight_start":123,"highlight_end":129}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":5660,"byte_end":5698,"line_start":147,"line_end":147,"column_start":84,"column_end":122,"is_primary":false,"text":[{"text":"            let circle_radius_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"circle_radius\").unwrap().as_ptr());","highlight_start":84,"highlight_end":122}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:147:123\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let circle_radius_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"circle_radius\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"getting the inner pointer of a temporary `CString`","code":{"code":"temporary_cstring_as_ptr","explanation":null},"level":"warning","spans":[{"file_name":"examples/main.rs","byte_start":5830,"byte_end":5836,"line_start":148,"line_end":148,"column_start":121,"column_end":127,"is_primary":true,"text":[{"text":"            let circle_color_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"circle_color\").unwrap().as_ptr());","highlight_start":121,"highlight_end":127}],"label":"this pointer will be invalid","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"examples/main.rs","byte_start":5792,"byte_end":5829,"line_start":148,"line_end":148,"column_start":83,"column_end":120,"is_primary":false,"text":[{"text":"            let circle_color_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"circle_color\").unwrap().as_ptr());","highlight_start":83,"highlight_end":120}],"label":"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, see https://doc.rust-lang.org/reference/destructors.html","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: getting the inner pointer of a temporary `CString`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/main.rs:148:121\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let circle_color_loc = gl::GetUniformLocation(compute_shader_program, CString::new(\"circle_color\").unwrap().as_ptr());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis pointer will be invalid\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for more information, see https://doc.rust-lang.org/reference/destructors.html\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `Objects` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":146,"byte_end":153,"line_start":9,"line_end":9,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        pub Objects: Vec<Circle>,","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"examples/window_manager/window_manager.rs","byte_start":146,"byte_end":153,"line_start":9,"line_end":9,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"        pub Objects: Vec<Circle>,","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"objects","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Objects` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mexamples/window_manager/window_manager.rs:9:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub Objects: Vec<Circle>,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `objects`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"18 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 18 warnings emitted\u001b[0m\n\n"}
